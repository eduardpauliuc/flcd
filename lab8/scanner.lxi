%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char **string_symbol_table;
char **identifier_symbol_table;
int *int_symbol_table;

int string_table_size = 10;
int identifier_table_size = 10;
int int_table_size = 10;
int string_current_size = 0;
int identifier_current_size = 0;
int int_current_size = 0;
struct PifRow{
    int type; //0 - token, 1 - identifier, 2 - int constant, 3 - string constant
    char *token;
    int position;
};
struct PifRow* pif;
int pif_current_size = 10;
int pointer_pif = 0;

void init_symbol_tables()
{
    string_symbol_table = malloc(string_table_size * sizeof(char*));
    identifier_symbol_table = malloc(identifier_table_size * sizeof(char*));
    int_symbol_table = malloc(int_table_size * sizeof(int));
    pif = malloc(pif_current_size * sizeof(struct PifRow));
}

void resize_string_table(){
    char **new_string_symbol_table = malloc(string_table_size * 2 * sizeof (char*));
    for (int i = 0; i < string_table_size; ++i)
        new_string_symbol_table[i] = string_symbol_table[i];
    free(string_symbol_table);
    string_table_size *= 2;
    string_symbol_table = new_string_symbol_table;
}

void add_string (char *string)
{
    if (string_table_size == string_current_size) {
       resize_string_table();
    }
    string_symbol_table[string_current_size++] = string;
}

void resize_identifier_table(){
    char **new_identifier_symbol_table = malloc(identifier_table_size * 2 * sizeof (char*));
    for (int i = 0; i < identifier_table_size; ++i)
        new_identifier_symbol_table[i] = identifier_symbol_table[i];
    free(identifier_symbol_table);
    identifier_table_size *= 2;
    identifier_symbol_table = new_identifier_symbol_table;
}

void add_identifier (char *identifier)
{
    if (identifier_table_size == identifier_current_size) {
      resize_identifier_table();
    }
    identifier_symbol_table[identifier_current_size++] = identifier;
}

void resize_int_table(){
    int *new_int_symbol_table = malloc(int_table_size * 2 * sizeof (int));
    for (int i = 0; i < int_table_size; ++i)
        new_int_symbol_table[i] = int_symbol_table[i];
    free(int_symbol_table);
    int_table_size *= 2;
    int_symbol_table = new_int_symbol_table;
}

void add_int (int number)
{
    if (int_table_size == int_current_size) {
       resize_int_table();
    }
    int_symbol_table[int_current_size++] = number;
}

int add_to_string_table_or_get_index(char *string)
{
    for (int i = 0; i < string_current_size; ++i)
        if (strcmp(string, string_symbol_table[i]) == 0)
            return i;
    add_string(string);
    return string_current_size-1;
}

int add_to_identifier_table_or_get_index(char *identifier)
{
    for (int i = 0; i < identifier_current_size; ++i)
        if (strcmp(identifier, identifier_symbol_table[i]) == 0)
            return i;
    add_identifier(identifier);
    return identifier_current_size-1;
}

int add_to_int_table_or_get_index(char *number)
{
    int x = atoi(number); // NOLINT(cert-err34-c)
    for (int i = 0; i < int_current_size; ++i)
        if (x == int_symbol_table[i])
            return i;
    add_int(x);
    return int_current_size-1;
}

void add_to_pif(struct PifRow newPifRow)
{
    if (pif_current_size == pointer_pif) {
        struct PifRow *new_pif = malloc(pif_current_size * 2 * sizeof (struct PifRow));
        for (int i = 0; i < pif_current_size; ++i)
            new_pif[i] = pif[i];
        free(pif);
        pif_current_size *= 2;
        pif = new_pif;
    }
    pif[pointer_pif++] = newPifRow;
}

struct PifRow create_pif_row(int optype, char *token, int pos) {
    struct PifRow newPifRow;
    newPifRow.type = optype;
    newPifRow.position = pos;
    newPifRow.token = token;
    return newPifRow;
};

char* copy_string(char *string) {
    int size = (int)strlen(string);
    char* new_string = malloc((size+1) * sizeof (char));
    strcpy(new_string, string);
    return new_string;
}

%}

%option noyywrap
%option caseless

DIGIT [0-9]
NON_ZERO [1-9]
NUMBER 0|[+-]?{NON_ZERO}{DIGIT}*
LETTER [a-zA-Z]
STRING_CONSTANT_SYMBOL [\_\+\-\*\/\%\<\=\>\!,:\ ]
STRING_CONSTANT \"({LETTER}|{DIGIT}|{STRING_CONSTANT_SYMBOL})*\"
IDENTIFIER \$({LETTER}|\_)({LETTER}|{DIGIT}|\_)*
ERROR_IDENTIFIER \$({DIGIT})+({LETTER}|\_)+({LETTER}|{DIGIT}|\_)*
TOKEN [{|}|,|\[|\]|;|(|)|\+|-|\*|/|%|=|>|>=|<|<=|==|!=|-=|+=|*=|/=]

%%

"string"|"number"|"if"|"print"|"read_integer"|"read_string"|"else"|"while"|"in"|"for" { char *token = copy_string(yytext); add_to_pif(create_pif_row(0, token, -1)); printf("%s - reserved word\n", yytext);}

{IDENTIFIER} {char *id = copy_string(yytext);
                add_to_pif(create_pif_row(1, "id", add_to_identifier_table_or_get_index(id))); 
                printf("%s - identifier\n", yytext);}

{ERROR_IDENTIFIER} {printf("Invalid identifier at token %s at line %d\n", yytext, yylineno); 
                    exit(1);}

{NUMBER} {char *int_const = copy_string(yytext); 
            add_to_pif(create_pif_row(2, "int", add_to_int_table_or_get_index(int_const))); 
            printf("%s - int constant\n", yytext);}

{STRING_CONSTANT} {char *str_const = copy_string(yytext); 
            add_to_pif(create_pif_row(3, "str", add_to_string_table_or_get_index(str_const))); 
            printf("%s - str constant\n", yytext);}

{TOKEN} { char *token = copy_string(yytext);
             add_to_pif(create_pif_row(0, token, -1)); 
             printf("%s - token\n", yytext);}

[ \t]+ {}

[\n] {++yylineno;}

"//" {
		int c;

		while((c = input()) != 0 )
			if(c == '\n'){
				++yylineno;
                break;
            }
		}

. {printf("Error at token %s at line %d\n", yytext, yylineno); exit(1);}
%%

int main(int argc, char **argv ) 
{ 
    if ( argc > 1 ) 
    	yyin = fopen(argv[1], "r"); 
    else 
    	yyin = stdin;
   	init_symbol_tables();
    yylex();
    printf("\n\tInt constants symbol table\n");
    for (int i = 0; i < int_current_size; ++i)
    	printf("%d\n", int_symbol_table[i]);
    printf("\n\tString constants symbol table\n");
    for (int i = 0; i < string_current_size; ++i)
    	printf("%s\n", string_symbol_table[i]);
    printf("\n\tIdentifier symbol table\n");
    for (int i = 0; i < identifier_current_size; ++i)
    	printf("%s\n", identifier_symbol_table[i]);
    printf("\tPIF\n");
    for (int i = 0; i < pointer_pif; ++i)
    	printf("%d %s %d\n", pif[i].type, pif[i].token, pif[i].position);
}